#start vagrant server
Serges-MacBook-Pro:profiles-rest-api pomme4nous$ vagrant ssh

#if needed run vagrant up first
Serges-MacBook-Pro:profiles-rest-api pomme4nous$ vagrant up

#end vagrant server
vagrant@ubuntu-bionic:~$ exit

#go to /vagrant
vagrant@ubuntu-bionic:~$ cd /vagrant

#create python virtual env
vagrant@ubuntu-bionic:/vagrant$ python -m venv ~/env

#activate virtual env
vagrant@ubuntu-bionic:/vagrant$ source ~/env/bin/activate

#deactivate virtual environment
(env) vagrant@ubuntu-bionic:/vagrant$ deactivate

#install requirements in virtual environment pkg
(env) vagrant@ubuntu-bionic:/vagrant$ pip install -r requirements.txt

#create django project - profiles_project
(env) vagrant@ubuntu-bionic:/vagrant$ django-admin.py startproject profiles_project .

#create django app - profiles_api
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py startapp profiles_api

#start django dev web server
go to evn
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py runserver 0.0.0.0:8000

#check server
http://127.0.0.1:8000

#stop django dev web server
cntl+C  ^C

#every time create a model, make migrations then migrate
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py makemigrations profiles_api
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py migrate

#create super user
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py createsuperuser

#enable models for super user - admin.py
admin.site.register(models.UserProfile)

#create api view in views.py

#map url in urls.py, add url urlpatterns in profiles_api.urls py
path('api/', include('profiles_api.urls')),
urlpatterns = [
    path('hello-view/', views.HelloApiView.as_view()),
]

#check server
http://127.0.0.1:8000/api/hello-view/

#add serializer - to receive POST request
profiles_api/serializer.py

#add POST request in APIView
profiles_api/views.py def post()

#add PUT, PATCH, DELELTE
profiles_api/views.py def put, patch, delete

#profile API
create user profile serializer
  - UserProfileSerializer in serializers.py
create profile viewset, model view set
  - UserProfileViewSet in views.py
register profile viewset with the URL router
  - router.register('profile', views.UserProfileViewSet) in urls.py
register profile viewset with url router

#add Permissions
create permissions.py
create UpdateOwnProfile class in permissions.py
use permissions in view.py

#add login using token authentication
- add login view.py
- rest_framework.authtoken.views import ObtainAuthToken
- rest_framework.settings import api_settings

# Feed API
add new model for feed in model.py
  - class ProfileFeedItem(models.Model)
create migration
  - (env) vagrant@ubuntu-bionic:/vagrant$ python manage.py makemigrations
migrate
  - (env) vagrant@ubuntu-bionic:/vagrant$ python manage.py migrate
add profile feed model to admin
  - in admin.py add admin.site.register(models.ProfileFeedItem)
create a serializer for feed item
  - add ProfileFeedItemSerializer in serializers.py
create a viewset
  - views.py, create UserProfileFeedViewSet
link viewset to URLs
  - in urls.py, router.register('feed', views.UserProfileViewSet)
add permission to feed api
  - in permissions.py, add class UpdateOwnStatus
  - in views.py, use the permission

# Deploy to AWS
    - add ssh key to AWS
    - launch instance
    - AWS console
    https://us-east-2.console.aws.amazon.com/ec2/v2/home?region=us-east-2#Instances:sort=instanceId

    - add deploy scripts
    - goto AWS console copy instance's public dns
    - in terminal, $ ssh ubuntu@ec2-3-133-82-112.us-east-2.compute.amazonaws.com
    - download and run scrip
    ubuntu@ip-172-31-44-14:~$ curl -sL https://raw.githubusercontent.com/iksong/profiles-rest-api/master/deploy/setup.sh | sudo bash -

    - update
    - ssh to the server $ ssh ubuntu@ec2-3-133-82-112.us-east-2.compute.amazonaws.com
    - ubuntu@ip-172-31-44-14:~$ cd /usr/local/apps/profiles-rest-api/
    - update
    ubuntu@ip-172-31-44-14:/usr/local/apps/profiles-rest-api$ sudo sh ./deploy/update.sh
    - create super user
    ubuntu@ip-172-31-44-14:/usr/local/apps/profiles-rest-api$ sudo env/bin/python manage.py createsuperuser

    - disconnect from AWS
    $exit
